/*
OmniCore Model and State Management API

Testing DeviceApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package OmniCore

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/korewireless/OmniCore-Go-SDK"
)

func Test_OmniCore_DeviceApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DeviceApiService BindDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionId string
		var registryId string

		resp, httpRes, err := apiClient.DeviceApi.BindDevice(context.Background(), subscriptionId, registryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeviceApiService BindDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionId string
		var registryId string

		resp, httpRes, err := apiClient.DeviceApi.BindDevices(context.Background(), subscriptionId, registryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeviceApiService BlockDeviceCommuncation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionid string
		var registryId string
		var deviceId string

		resp, httpRes, err := apiClient.DeviceApi.BlockDeviceCommuncation(context.Background(), subscriptionid, registryId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeviceApiService CreateDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionId string
		var registryId string

		resp, httpRes, err := apiClient.DeviceApi.CreateDevice(context.Background(), subscriptionId, registryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeviceApiService DeleteDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionId string
		var registryId string
		var deviceId string

		resp, httpRes, err := apiClient.DeviceApi.DeleteDevice(context.Background(), subscriptionId, registryId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeviceApiService GetConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionid string
		var registryId string
		var deviceId string

		resp, httpRes, err := apiClient.DeviceApi.GetConfig(context.Background(), subscriptionid, registryId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeviceApiService GetDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionId string
		var registryId string
		var deviceId string

		resp, httpRes, err := apiClient.DeviceApi.GetDevice(context.Background(), subscriptionId, registryId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeviceApiService GetDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionId string
		var registryId string

		resp, httpRes, err := apiClient.DeviceApi.GetDevices(context.Background(), subscriptionId, registryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeviceApiService GetStates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionid string
		var registryId string
		var deviceId string

		resp, httpRes, err := apiClient.DeviceApi.GetStates(context.Background(), subscriptionid, registryId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeviceApiService SendCommandToDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionid string
		var registryId string
		var deviceId string

		resp, httpRes, err := apiClient.DeviceApi.SendCommandToDevice(context.Background(), subscriptionid, registryId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeviceApiService UnBindDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionId string
		var registryId string

		resp, httpRes, err := apiClient.DeviceApi.UnBindDevice(context.Background(), subscriptionId, registryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeviceApiService UnBindDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionId string
		var registryId string

		resp, httpRes, err := apiClient.DeviceApi.UnBindDevices(context.Background(), subscriptionId, registryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeviceApiService UpdateConfigurationToDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionid string
		var registryId string
		var deviceId string

		resp, httpRes, err := apiClient.DeviceApi.UpdateConfigurationToDevice(context.Background(), subscriptionid, registryId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeviceApiService UpdateCustomOnboardRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionid string
		var registryId string
		var deviceId string

		resp, httpRes, err := apiClient.DeviceApi.UpdateCustomOnboardRequest(context.Background(), subscriptionid, registryId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeviceApiService UpdateDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriptionId string
		var registryId string
		var deviceId string

		resp, httpRes, err := apiClient.DeviceApi.UpdateDevice(context.Background(), subscriptionId, registryId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
